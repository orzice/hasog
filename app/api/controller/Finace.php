<?php
// +----------------------------------------------------------------------
// | HaSog (幻神商城系统)
// +----------------------------------------------------------------------
// | 技术支持【幻神科技】: https://www.hasog.com
// +----------------------------------------------------------------------
// | 联系我们:  https://www.hasog.com
// +----------------------------------------------------------------------
// | gitee开源项目：https://gitee.com/orzice/hasog
// +----------------------------------------------------------------------
// | github开源项目：https://github.com/orzice/hasog
// +----------------------------------------------------------------------
// | Author：梗集(王国骁)  https://gitee.com/orzice
// +----------------------------------------------------------------------
// | DateTime：2020-12-31 18:28:38
// +----------------------------------------------------------------------


namespace app\api\controller;

use app\BaseController;
use app\common\controller\ApiController;
use app\common\model\AliPay;
use app\common\model\FinaceOfflinepayment;
use app\common\model\FinaceWithdrawset;
use app\common\pay\AliPays;
use think\facade\Config;
use think\facade\Db;
use think\facade\Event;
use app\common\model\FinaceUprecord;
use app\common\model\FinaceIncome;
use app\common\model\FinaceBalanceset;
use app\common\model\FinaceWithdrawalrecord;
use app\common\model\FinaceBalancesub;
use app\common\model\FinaceOfflinewithdrawals;
use app\common\model\FinaceBankcard;
use app\common\model\Member;
use Yansongda\Pay\Pay;
use app\common\pay\WechatPays;
use app\common\model\WechatPay;

class Finace extends ApiController
{
        /** BIN号 **/
    private static $Bank = array (
  102033 => '广东发展银行.广发理财通',
  103000 => '农业银行.金穗借记卡',
  185720 => '昆明农联社.金碧卡',
  303781 => '中国光大银行.阳光爱心卡',
  356827 => '上海银行.双币种申卡贷记卡个人金卡',
  356828 => '上海银行.双币种申卡贷记卡个人普卡',
  356833 => '中国银行.中银JCB卡金卡',
  356835 => '中国银行.中银JCB卡普卡',
  356837 => '中国光大银行.阳光商旅信用卡',
  356838 => '中国光大银行.阳光商旅信用卡',
  356839 => '中国光大银行.阳光商旅信用卡',
  356840 => '中国光大银行.阳光商旅信用卡',
  356885 => '招商银行.招商银行银行信用卡',
  356886 => '招商银行.招商银行银行信用卡',
  356887 => '招商银行.招商银行银行信用卡',
  356888 => '招商银行.招商银行银行信用卡',
  356889 => '招商银行.招商银行银行信用卡',
  356890 => '招商银行.招商银行银行信用卡',
  370246 => '工商银行.牡丹运通卡金卡',
  370247 => '工商银行.牡丹运通卡普通卡',
  370248 => '中国工商银行.牡丹运通卡金卡',
  370249 => '中国工商银行.牡丹运通卡金卡',
  400360 => '中信实业银行.中信贷记卡',
  400937 => '中国银行.长城国际卡(美元卡)-商务普卡',
  400938 => '中国银行.长城国际卡(美元卡)-商务金卡',
  400939 => '中国银行.长城国际卡(港币卡)-商务普卡',
  400940 => '中国银行.长城国际卡(港币卡)-商务金卡',
  400941 => '中国银行.长城国际卡(美元卡)-个人普卡',
  400942 => '中国银行.长城国际卡(美元卡)-个人金卡',
  402658 => '招商银行.两地一卡通',
  402673 => '上海银行.申卡贷记卡',
  402791 => '工商银行.国际借记卡',
  403361 => '农业银行.金穗贷记卡',
  403391 => '中信实业银行.中信贷记卡',
  404117 => '农业银行.金穗贷记卡',
  404157 => '中信实业银行.中信贷记卡',
  404171 => '中信实业银行.中信贷记卡',
  404172 => '中信实业银行.中信贷记卡',
  404173 => '中信实业银行.中信贷记卡',
  404174 => '中信实业银行.中信贷记卡',
  404738 => '上海浦东发展银行.上海浦东发展银行信用卡VISA普通卡',
  404739 => '上海浦东发展银行.上海浦东发展银行信用卡VISA金卡',
  405512 => '交通银行.太平洋互连卡',
  406252 => '中国光大银行.阳光信用卡',
  406254 => '中国光大银行.阳光信用卡',
  406365 => '广东发展银行.广发VISA信用卡',
  407405 => '民生银行.民生贷记卡',
  409665 => '中国银行.中银威士信用卡员工普卡',
  409666 => '中国银行.中银威士信用卡个人普卡',
  409667 => '中国银行.中银威士信用卡员工金卡',
  409668 => '中国银行.中银威士信用卡个人金卡',
  409669 => '中国银行.中银威士信用卡员工白金卡',
  409670 => '中国银行.中银威士信用卡个人白金卡',
  409671 => '中国银行.中银威士信用卡商务白金卡',
  409672 => '中国银行.长城公务卡',
  410062 => '招商银行银行.招商银行银行国际卡',
  412962 => '深圳发展银行.发展借记卡',
  412963 => '深圳发展银行.发展借记卡',
  415599 => '民生银行.民生借记卡',
  421317 => '北京银行.京卡双币种国际借记卡',
  421349 => '建设银行.乐当家银卡VISA',
  421393 => '民生银行.民生国际卡',
  421437 => '中信实业银行.中信国际借记卡',
  421865 => '民生银行.民生国际卡',
  421869 => '民生银行.民生贷记卡',
  421870 => '民生银行.民生贷记卡',
  421871 => '民生银行.民生贷记卡',
  422160 => '北京银行.京卡贵宾金卡',
  422161 => '北京银行.京卡贵宾白金卡',
  424106 => '中国银行.长城人民币信用卡-个人金卡',
  424107 => '中国银行.长城人民币信用卡-员工金卡',
  424108 => '中国银行.长城人民币信用卡-个人普卡',
  424109 => '中国银行.长城人民币信用卡-员工普卡',
  424110 => '中国银行.长城人民币信用卡-单位普卡',
  424111 => '中国银行.长城人民币信用卡-单位金卡',
  424902 => '中国银行.长城国际卡(美元卡)-白金卡',
  425862 => '中国光大银行.阳光商旅信用卡',
  427010 => '工商银行.牡丹VISA信用卡',
  427018 => '工商银行.牡丹VISA信用卡',
  427019 => '工商银行.牡丹VISA信用卡',
  427020 => '工商银行.牡丹VISA信用卡',
  427028 => '工商银行.国际借记卡',
  427029 => '工商银行.牡丹VISA信用卡',
  427038 => '工商银行.国际借记卡',
  427039 => '工商银行.牡丹VISA信用卡',
  427062 => '工商银行.牡丹VISA信用卡',
  427064 => '工商银行.牡丹VISA信用卡',
  427571 => '中国民生银行.民生国际借记卡',
  428911 => '广东发展银行.广发信用卡',
  431502 => '华夏.华夏卡',
  433666 => '中信实业银行.中信贷记卡',
  433670 => '中信实业银行.中信借记卡',
  433680 => '中信实业银行.中信借记卡',
  434061 => '建设银行.乐当家金卡VISA',
  434062 => '建设银行.乐当家白金卡VISA',
  435744 => '深圳发展银行.沃尔玛百分卡',
  435745 => '深圳发展银行.沃尔玛百分卡',
  436718 => '建设银行.龙卡贷记卡公司卡金卡VISA',
  436728 => '建设银行.龙卡普通卡VISA',
  436738 => '建设银行.龙卡贷记卡公司卡普通卡VISA',
  436742 => '建设银行.龙卡储蓄卡',
  436745 => '建设银行.龙卡国际普通卡VISA',
  436748 => '建设银行.龙卡国际金卡VISA',
  436768 => '广东发展银行.广发信用卡',
  438088 => '中国银行.中银奥运信用卡个人卡',
  438125 => '工商银行.牡丹VISA信用卡',
  438126 => '中国工商银行.牡丹VISA白金卡',
  438588 => '兴业银行.兴业智能卡',
  438589 => '兴业银行.兴业智能卡',
  438600 => '上海银行.上海申卡IC',
  439188 => '招商银行.招商银行银行信用卡',
  439225 => '招商银行.VISA信用卡',
  439227 => '招商银行.VISA商务信用卡',
  442729 => '中信实业银行.中信国际借记卡',
  442730 => '中信实业银行.中信国际借记卡',
  451289 => '兴业银行.VISA信用卡',
  451291 => '中国银行.长城国际卡(欧元卡)-个人金卡',
  451804 => '工商银行.牡丹贷记卡',
  451810 => '工商银行.牡丹贷记卡',
  453242 => '建设银行.VISA准贷记卡',
  456351 => '中国银行.长城电子借记卡',
  456418 => '上海浦东发展银行.浦发银行VISA年青卡',
  458060 => '工商银行.牡丹信用卡',
  458071 => '工商银行.牡丹贷记卡',
  458123 => '交通银行.太平洋双币贷记卡VISA',
  458124 => '交通银行.太平洋双币贷记卡VISA',
  468203 => '招商银行.招商银行银行国际卡',
  472067 => '民生银行.民生国际卡',
  472068 => '民生银行.民生国际卡',
  479228 => '招商银行.招商银行银行信用卡',
  479229 => '招商银行.招商银行银行信用卡',
  481699 => '中国光大银行.阳光白金信用卡',
  486466 => '上海银行.申卡贷记卡',
  486493 => '兴业银行.VISA商务普卡',
  486494 => '兴业银行.VISA商务金卡',
  486497 => '中国光大银行.阳光商旅信用卡',
  487013 => '广东发展银行.广发VISA信用卡',
  489592 => '中国建设银行.VISA白金/钻石信用卡',
  489734 => '中国工商银行.牡丹欧元卡',
  489735 => '中国工商银行.牡丹欧元卡',
  489736 => '中国工商银行.牡丹欧元卡',
  491020 => '农业银行.金穗信用卡',
  491031 => '建设银行.VISA准贷记金卡',
  491032 => '广东发展银行.广发信用卡',
  491040 => '交通银行.太平洋信用卡',
  493427 => '广东发展银行.广发信用卡',
  493878 => '中国银行.长城国际卡(港币卡)-个人金卡',
  498451 => '上海浦东发展银行.上海浦东发展银行信用卡VISA白金卡',
  504923 => '常州商业银行.月季卡',
  510529 => '工商银行.牡丹万事达国际借记卡',
  512315 => '中国银行.中银万事达信用卡员工普卡',
  512316 => '中国银行.中银万事达信用卡个人普卡',
  512411 => '中国银行.中银万事达信用卡员工金卡',
  512412 => '中国银行.中银万事达信用卡个人金卡',
  512425 => '招商银行.招商银行银行国际卡',
  512431 => '宁波市商业银行.汇通国际卡',
  512466 => '民生银行.民生贷记卡',
  512695 => '中国银行.长城国际卡(英镑卡)-个人普卡',
  512732 => '中国银行.长城国际卡(英镑卡)-个人金卡',
  514906 => '中信实业银行.中信贷记卡',
  514957 => '中国银行.中银万事达信用卡员工白金卡',
  514958 => '中国银行.中银万事达信用卡个人白金卡',
  517636 => '民生银行.民生贷记卡',
  518212 => '中信实业银行.中信贷记卡',
  518364 => '广东发展银行.广发信用卡',
  518378 => '中国银行.长城人民币信用卡-个人金卡',
  518379 => '中国银行.长城人民币信用卡-员工金卡',
  518474 => '中国银行.长城人民币信用卡-专用卡普卡',
  518475 => '中国银行.长城人民币信用卡-员工普卡',
  518476 => '中国银行.长城人民币信用卡-个人普卡',
  518710 => '招商银行.MASTER信用卡',
  518718 => '招商银行.MASTER信用金卡',
  519412 => '农业银行.金穗贷记卡',
  519498 => '上海银行.双币种申卡贷记卡普通卡',
  520082 => '农业银行.金穗贷记卡',
  520108 => '中信实业银行.中信贷记卡',
  520131 => '上海银行.双币种申卡贷记卡金卡',
  520152 => '广东发展银行.广发万事达信用卡',
  520169 => '交通银行.太平洋双币贷记卡MasterCard',
  520194 => '宁波市商业银行.汇通国际卡',
  520382 => '广东发展银行.广发万事达信用卡',
  521899 => '交通银行.太平洋双币贷记卡MasterCard',
  522153 => '中国银行.长城国际卡(欧元卡)-个人普卡',
  523036 => '兴业银行.万事达信用卡',
  524011 => '招商银行.招商银行银行国际卡',
  524047 => '工商银行.牡丹万事达白金卡',
  524070 => '兴业银行.万事达信用卡',
  524091 => '中国工商银行.牡丹海航信用卡个人金卡',
  524094 => '建设银行.乐当家金卡MASTER',
  524864 => '中国银行.长城信用卡',
  524865 => '中国银行.长城信用卡',
  525498 => '中国工商银行.牡丹海航信用卡个人普卡',
  525745 => '中国银行.长城信用卡',
  525746 => '中国银行.长城信用卡',
  526410 => '建设银行.乐当家银卡MASTER',
  526855 => '深圳市商业银行.深圳市商业银行信用卡',
  527414 => '兴业银行.加菲猫信用卡',
  528020 => '深圳市商业银行.深圳市商业银行信用卡',
  528931 => '广东发展银行.广发万事达信用卡',
  528948 => '民生银行.民生贷记卡',
  530970 => '工商银行.牡丹万事达信用卡',
  530980 => '工商银行.牡丹信用卡',
  530990 => '工商银行.牡丹万事达信用卡',
  532420 => '建设银行.MASTER准贷记卡',
  532430 => '建设银行.龙卡普通卡MASTER',
  532450 => '建设银行.龙卡国际普通卡MASTER',
  532458 => '建设银行.龙卡国际金卡MASTER',
  535910 => '农业银行.金穗信用卡',
  535918 => '农业银行.金穗信用卡',
  537830 => '交通银行.太平洋信用卡',
  540297 => '中国银行.长城国际卡(港币卡)-个人普卡',
  540838 => '中国银行.长城国际卡(美元卡)-个人普卡',
  541068 => '中国银行.长城国际卡(美元卡)-个人金卡',
  541709 => '广东发展银行.广发信用卡',
  543159 => '中国光大银行.第十八届世界足球锦标赛纪念卡',
  544033 => '建设银行.MASTER准贷记金卡',
  545619 => '招商银行.万事达信用卡',
  545623 => '招商银行.万事达信用卡',
  545947 => '招商银行.万事达信用卡',
  547628 => '中国银行.长城国际卡(美元卡)-商务普卡',
  547648 => '中国银行.长城国际卡(港币卡)-商务普卡',
  547766 => '中国银行.长城万事达信用卡单位普卡',
  548259 => '工商银行.国际借记卡',
  548844 => '广东发展银行.广发信用卡',
  552245 => '建设银行.乐当家白金卡MASTER',
  552288 => '民生银行.民生贷记卡',
  552534 => '招商银行.招商银行银行信用卡',
  552587 => '招商银行.招商银行银行信用卡',
  552599 => '农业银行.金穗贷记卡',
  552742 => '中国银行.长城公务卡',
  552794 => '广东发展银行.广发万事达信用卡',
  552801 => '建设银行.龙卡贷记卡公司卡普通卡MASTER',
  552853 => '交通银行.太平洋双币贷记卡MasterCard',
  553131 => '中国银行.长城公务卡',
  553242 => '建设银行.龙卡信用卡',
  556610 => '民生银行.民生贷记卡',
  556617 => '中信实业银行.中信MASTERCARD人民币+美金双币贷记卡',
  558360 => '工商银行.牡丹万事达信用卡',
  558730 => '农业银行.金穗贷记卡',
  558808 => '中国银行.长城国际卡(港币卡)-商务金卡',
  558809 => '中国银行.长城国际卡(美元卡)-商务金卡',
  558868 => '中国银行.中银万事达信用卡单位金卡',
  558894 => '广东发展银行.广发万事达信用卡',
  558895 => '建设银行.龙卡贷记卡公司卡金卡MASTER',
  558916 => '中信实业银行.中信MASTERCARD人民币+美金双币贷记卡',
  566666 => '沈阳市商业银行.玫瑰卡',
  584016 => '深圳农联社.信通卡',
  601100 => 'D.F.S.I(备注1).发现卡',
  601101 => 'D.F.S.I.发现卡',
  601121 => 'D.F.S.I.发现卡',
  601122 => 'D.F.S.I.发现卡',
  601123 => 'D.F.S.I.发现卡',
  601124 => 'D.F.S.I.发现卡',
  601125 => 'D.F.S.I.发现卡',
  601126 => 'D.F.S.I.发现卡',
  601127 => 'D.F.S.I.发现卡',
  601128 => 'D.F.S.I.发现卡',
  601131 => 'D.F.S.I.发现卡',
  601136 => 'D.F.S.I.发现卡',
  601137 => 'D.F.S.I.发现卡',
  601138 => 'D.F.S.I.发现卡',
  601140 => 'D.F.S.I.发现卡',
  601142 => 'D.F.S.I.发现卡',
  601143 => 'D.F.S.I.发现卡',
  601144 => 'D.F.S.I.发现卡',
  601145 => 'D.F.S.I.发现卡',
  601146 => 'D.F.S.I.发现卡',
  601147 => 'D.F.S.I.发现卡',
  601148 => 'D.F.S.I.发现卡',
  601149 => 'D.F.S.I.发现卡',
  601174 => 'D.F.S.I.发现卡',
  601177 => 'D.F.S.I.发现卡',
  601178 => 'D.F.S.I.发现卡',
  601179 => 'D.F.S.I.发现卡',
  601186 => 'D.F.S.I.发现卡',
  601187 => 'D.F.S.I.发现卡',
  601188 => 'D.F.S.I.发现卡',
  601189 => 'D.F.S.I.发现卡',
  601382 => '中国银行.长城电子借记卡',
  601428 => '交通银行.太平洋万事顺卡',
  602907 => '深圳商业银行.万事顺卡',
  602969 => '北京银行.京卡',
  603128 => '南京市商业银行.梅花卡',
  603367 => '杭州商业银行.西湖卡',
  603445 => '广州市商业银行.羊城借记卡',
  603506 => '苏州市商业银行.姑苏卡',
  603601 => '徽商银行合肥分行.黄山卡',
  603602 => '绍兴商业银行.兰花卡',
  603694 => '常熟农村商业银行.粒金卡',
  603708 => '大连商业银行.北方明珠卡',
  621021 => '河北省农村信用社.信通卡',
  621201 => '韩亚银行.',
  621977 => '温州商业银行.金鹿卡',
  622126 => '阜新市商业银行.金通卡',
  622127 => '厦门市农村信用合作社.万通卡',
  622128 => '深圳农信社.信通卡',
  622129 => '深圳市农村信用合作社联合社.信通商务卡',
  622131 => '淮安市商业银行.九州借记卡',
  622132 => '嘉兴市商业银行.南湖借记卡',
  622133 => '贵阳市商业银行.甲秀银联借记卡',
  622134 => '重庆市商业银行.长江卡',
  622135 => '成都商业银行.锦程卡',
  622136 => '西安市商业银行.福瑞卡',
  622137 => '徽商银行芜湖分行.黄山卡',
  622138 => '北京农联社.信通卡',
  622139 => '兰州市商业银行.敦煌国际卡',
  622140 => '廊坊市商业银行.银星卡',
  622141 => '泰隆城市信用社.泰隆卡',
  622143 => '乌鲁木齐市商业银行.雪莲借记卡',
  622146 => '青岛商行.金桥卡',
  622147 => '呼市商业银行.百灵卡',
  622148 => '上海银行.人民币申卡贷记卡金卡',
  622149 => '上海银行.人民币申卡贷记卡普通卡',
  622150 => '国家邮政局.绿卡银联标准卡',
  622151 => '国家邮政局.绿卡银联标准卡',
  622152 => '成都市商业银行.锦程卡金卡',
  622153 => '成都市商业银行.锦程卡定活一卡通金卡',
  622154 => '成都市商业银行.锦程卡定活一卡通',
  622155 => '深圳市商业银行.深圳市商业银行信用卡',
  622156 => '深圳市商业银行.深圳市商业银行信用卡',
  622165 => '包头市商业银行.包头市商业银行借记卡',
  622166 => '中国建设银行.龙卡人民币信用卡',
  622168 => '中国建设银行.龙卡人民币信用金卡',
  622169 => '湖南省农村信用社联合社.福祥借记卡',
  622178 => '吉林市商业银行.信用卡',
  622179 => '吉林市商业银行.信用卡',
  622184 => '福建省农村信用社联合社.万通',
  622188 => '国家邮政局.绿卡银联标准卡',
  622199 => '国家邮政局.绿卡银联标准卡',
  622200 => '中国工商银行.灵通卡',
  622202 => '中国工商银行.E时代卡',
  622203 => '中国工商银行.E时代卡',
  622208 => '中国工商银行.理财金卡',
  622210 => '中国工商银行.准贷记卡',
  622211 => '中国工商银行.准贷记卡',
  622212 => '中国工商银行.准贷记卡',
  622213 => '中国工商银行.准贷记卡',
  622214 => '中国工商银行.准贷记卡',
  622215 => '中国工商银行.准贷记卡',
  622220 => '中国工商银行.准贷记卡',
  622225 => '中国工商银行.准贷记卡',
  622230 => '中国工商银行.贷记卡',
  622235 => '中国工商银行.贷记卡',
  622240 => '中国工商银行.贷记卡',
  622245 => '中国工商银行.贷记卡',
  622250 => '交行太平洋卡中心.太平洋人民币贷记卡',
  622251 => '交行太平洋卡中心.太平洋人民币贷记卡',
  622252 => '交行太平洋卡中心.太平洋人民币贷记卡',
  622253 => '交行太平洋卡中心.太平洋人民币贷记卡',
  622254 => '交通银行.太平洋人民币准贷记卡',
  622258 => '交通银行.太平洋人民币借记卡',
  622259 => '交通银行.太平洋人民币借记卡',
  622260 => '交通银行.太平洋人民币借记卡',
  622261 => '交通银行.太平洋人民币借记卡',
  622280 => '建设银行.622280银联储蓄卡',
  622291 => '柳州市商业银行.龙城卡',
  622292 => '柳州市商业银行.龙城卡',
  622301 => '湖州市商业银行.百合卡',
  622302 => '佛山市禅城区农村信用联社.信通卡',
  622303 => '南京市商业银行.梅花贷记卡',
  622305 => '南京市商业银行.梅花借记卡',
  622307 => '九江市商业银行.庐山卡',
  622308 => '昆明商业银行.春城卡',
  622310 => '西宁市商业银行.三江银行卡',
  622311 => '淄博市商业银行.金达借记卡',
  622312 => '徐州市郊农村信用合作联社.信通卡',
  622316 => '宁波市商业银行.汇通卡',
  622318 => '宁波市商业银行.汇通卡',
  622319 => '山东农村信用联合社.信通卡',
  622321 => '台州市商业银行.大唐贷记卡',
  622322 => '顺德农信社.恒通卡',
  622323 => '常熟农村商业银行.粒金借记卡',
  622324 => '江苏农信.圆鼎卡',
  622325 => '武汉市商业银行.九通卡',
  622327 => '徽商银行马鞍山分行.黄山卡',
  622328 => '东莞农村信用合作社.信通卡',
  622329 => '天津市农村信用社.信通借记卡',
  622331 => '天津市商业银行.津卡',
  622332 => '张家港市农村商业银行.一卡通',
  622333 => '东莞市商业银行.万顺通卡',
  622335 => '南宁市商业银行.桂花卡',
  622336 => '包头市商业银行.雄鹰卡',
  622337 => '连云港市商业银行.金猴神通借记卡',
  622338 => '焦作市商业银行.月季借记卡',
  622339 => '鄞州农村合作银行.蜜蜂借记卡',
  622340 => '徽商银行淮北分行.黄山卡',
  622341 => '江阴农村商业银行.合作借记卡',
  622342 => '攀枝花市商业银行.攀枝花卡',
  622343 => '佛山市三水区农村信用合作社.信通卡',
  622345 => '成都农信社.天府借记卡',
  622346 => '中国银行.人民币信用卡金卡',
  622347 => '中国银行.人民币信用卡普通卡',
  622348 => '中国银行.中银卡',
  622349 => '南洋商业银行.人民币信用卡金卡',
  622350 => '南洋商业银行.人民币信用卡普通卡',
  622351 => '南洋商业银行.中银卡',
  622352 => '集友银行.人民币信用卡金卡',
  622353 => '集友银行.人民币信用卡普通卡',
  622355 => '集友银行.中银卡',
  622358 => '沧州农信社.信通卡',
  622359 => '临沂市商业银行.沂蒙卡',
  622360 => '香港上海汇丰银行有限公司.人民币卡',
  622361 => '香港上海汇丰银行有限公司.人民币金卡',
  622362 => '中山市农村信用合作社.信通卡',
  622363 => '珠海市商业银行.万事顺卡',
  622365 => '东亚银行有限公司.电子网络人民币卡',
  622366 => '徽商银行安庆分行.黄山卡',
  622367 => '绵阳市商业银行.科技城卡',
  622368 => '长沙市商业银行.芙蓉卡',
  622369 => '昆明市农村信用联社.金碧一卡通',
  622370 => '泉州市商业银行.海峡银联卡',
  622371 => '花旗银行有限公司.花旗人民币信用卡',
  622373 => '大新银行有限公司.大新人民币信用卡普通卡',
  622375 => '大新银行有限公司.人民币借记卡',
  622376 => '恒生银行有限公司.恒生人民币信用卡',
  622377 => '恒生银行有限公司.恒生人民币金卡',
  622378 => '恒生银行有限公司.恒生人民币白金卡',
  622379 => '济南市商业银行.齐鲁卡',
  622382 => '美国银行.人民币卡',
  622383 => '大连市商业银行.大连市商业银行贷记卡',
  622384 => '恒丰银行.九州借记卡',
  622385 => '大连市商业银行.大连市商业银行贷记卡',
  622386 => '上海商业银行.人民币信用卡',
  622387 => '永隆银行有限公司.永隆人民币信用卡',
  622388 => '福州市商业银行.榕城卡',
  622389 => '宁波鄞州农村合作银行.蜜蜂贷记卡',
  622391 => '潍坊商业银行.鸢都卡',
  622392 => '泸州市商业银行.酒城卡',
  622393 => '厦门市商业银行.银鹭借记卡',
  622394 => '镇江市商业银行.金山灵通卡',
  622395 => '大同市商业银行.云冈卡',
  622396 => '宜昌市商业银行.三峡卡',
  622397 => '宜昌市商业银行.信用卡',
  622398 => '葫芦岛市商业银行.一通卡',
  622399 => '辽阳市商业银行.新兴卡',
  622400 => '营口市商业银行.辽河一卡通',
  622406 => '香港上海汇丰银行有限公司.ATM Card',
  622407 => '香港上海汇丰银行有限公司.ATM Card',
  622411 => '威海市商业银行.通达卡',
  622412 => '湖北农信社.信通卡',
  622413 => '鞍山市商业银行.千山卡',
  622415 => '丹东商行.银杏卡',
  622418 => '南通市商业银行.金桥卡',
  622420 => '洛阳市商业银行.都市一卡通',
  622421 => '郑州商业银行.世纪一卡通',
  622422 => '扬州市商业银行.绿扬卡',
  622423 => '永隆银行有限公司.永隆人民币信用卡',
  622425 => '哈尔滨市商业银行.丁香借记卡',
  622426 => '天津市商业银行.津卡贷记卡',
  622427 => '台州市商业银行.大唐卡',
  622428 => '银川市商业银行.如意卡',
  622429 => '银川市商业银行.如意借记卡',
  622432 => '大西洋银行股份有限公司.澳门币卡',
  622434 => '澳门国际银行.人民币卡',
  622435 => '澳门国际银行.港币卡',
  622436 => '澳门国际银行.澳门币卡',
  622439 => '广州农村信用合作社.麒麟储蓄卡',
  622440 => '吉林市商业银行.雾凇卡',
  622441 => '三门峡市城市信用社.天鹅卡',
  622442 => '抚顺市商业银行.绿叶卡',
  622443 => '昆山农村信用合作社联合社.江通卡',
  622447 => '常州商业银行.月季卡',
  622448 => '湛江市商业银行.南珠卡',
  622449 => '金华市商业银行.双龙借记卡',
  622450 => '金华市商业银行.双龙贷记卡',
  622451 => '大新银行有限公司.大新人民币信用卡金卡',
  622452 => '江苏农信社.圆鼎卡',
  622453 => '中信嘉华银行有限公司.人民币信用卡金卡',
  622456 => '中信嘉华银行有限公司.人民币信用卡普通卡',
  622459 => '中信嘉华银行有限公司.人民币借记卡',
  622462 => '常熟市农村商业银行.粒金贷记卡',
  622463 => '廖创兴银行有限公司.港币借记卡',
  622466 => '沈阳市商业银行.玫瑰卡',
  622467 => '广州市商业银行.羊城借记卡',
  622468 => '上海银行.申卡',
  622470 => '江门市新会农信社.信通卡',
  622471 => '东亚银行有限公司.人民币信用卡',
  622472 => '东亚银行有限公司.人民币信用卡金卡',
  622476 => '乌鲁木齐市商业银行.雪莲贷记卡',
  622477 => '高要市农村信用联社.信通卡',
  622478 => '上海市农村信用合作社联社.如意卡',
  622481 => '江阴市农村商业银行.合作贷记卡',
  622485 => '无锡市商业银行.太湖金保卡',
  622486 => '绍兴市商业银行.兰花卡',
  622487 => '星展银行.银联人民币银行卡',
  622488 => '吴江农村商业银行.垂虹卡',
  622489 => '大新银行有限公司.借记卡',
  622490 => '星展银行.银联人民币银行卡',
  622491 => '星展银行.银联银行卡',
  622492 => '星展银行.银联银行卡',
  622493 => 'AEON信贷财务.AEON JUSCO银联卡',
  622495 => 'Travelex.Travelex港币卡',
  622496 => 'Travelex.Travelex美元卡',
  622498 => '石家庄市商业银行.如意借记卡',
  622499 => '石家庄市商业银行.如意借记卡',
  622500 => '上海浦东发展银行.东方卡',
  622506 => '陕西省农村信用社联合社.陕西信合富泰卡',
  622509 => '高要市农村信用合作社联社.信通白金卡',
  622510 => '高要市农村信用合作社联社.信通金卡',
  622516 => '上海浦东发展银行.东方-轻松理财卡白金卡',
  622517 => '上海浦东发展银行.东方-轻松理财卡普卡',
  622518 => '上海浦东发展银行.东方-轻松理财卡钻石卡',
  622519 => '上海浦东发展银行.东方-新标准准贷记卡',
  622521 => '上海浦东发展银行.东方卡',
  622522 => '上海浦东发展银行.东方卡',
  622523 => '上海浦东发展银行.东方卡',
  622525 => '深圳发展银行.人民币信用卡金卡',
  622526 => '深圳发展银行.人民币信用卡普卡',
  622538 => '深圳发展银行.发展卡',
  622546 => '大丰银行有限公司.人民币借记卡',
  622547 => '大丰银行有限公司.港币借记卡',
  622548 => '大丰银行有限公司.澳门币借记卡',
  622549 => '哈萨克斯坦国民储蓄银行.Halykbank Classic',
  622550 => '哈萨克斯坦国民储蓄银行.Halykbank Golden',
  622561 => '德阳市商业银行.锦程卡定活一卡通白金卡',
  622562 => '德阳市商业银行.锦程卡定活一卡通金卡',
  622563 => '德阳市商业银行.锦程卡定活一卡通',
  622575 => '招商银行银行.招商银行银行信用卡',
  622576 => '招商银行银行.招商银行银行信用卡',
  622577 => '招商银行银行.招商银行银行信用卡',
  622578 => '招商银行银行.招商银行银行信用卡',
  622579 => '招商银行银行.招商银行银行信用卡',
  622580 => '招商银行银行.一卡通',
  622581 => '招商银行银行.招商银行银行信用卡',
  622582 => '招商银行银行.招商银行银行信用卡',
  622588 => '招商银行银行.一卡通',
  622598 => '招商银行银行.公司卡',
  622600 => '民生银行.民生信用卡',
  622601 => '民生银行.民生信用卡',
  622602 => '中国民生银行.民生银联白金信用卡',
  622603 => '中国民生银行.民生银联商务信用卡',
  622615 => '民生银行.民生借记卡',
  622617 => '中国民生银行.民生借记卡',
  622619 => '中国民生银行.民生借记卡',
  622622 => '中国民生银行.民生借记卡',
  622630 => '华夏银行.华夏卡',
  622631 => '华夏银行.华夏至尊金卡',
  622632 => '华夏银行.华夏丽人卡',
  622633 => '华夏银行.华夏万通卡',
  622650 => '中国光大银行.炎黄卡普卡',
  622655 => '中国光大银行.炎黄卡白金卡',
  622658 => '中国光大银行.炎黄卡金卡',
  622660 => '光大银行.阳光卡',
  622678 => '中信实业银行信用卡中心.中信银联标准贷记卡',
  622679 => '中信实业银行信用卡中心.中信银联标准贷记卡',
  622680 => '中信实业银行信用卡中心.中信银联标准贷记卡',
  622681 => '江西省农村信用社联合社.百福卡',
  622682 => '江西省农村信用社联合社.百福卡',
  622684 => '渤海银行.渤海银行公司借记卡',
  622688 => '中信实业银行信用卡中心.中信银联标准贷记卡',
  622689 => '中信实业银行信用卡中心.中信银联标准贷记卡',
  622690 => '中信实业银行.中信借记卡',
  622691 => '中信实业银行.中信借记卡',
  622692 => '中信实业银行.中信贵宾卡',
  622696 => '中信银行.中信理财宝金卡',
  622698 => '中信银行.中信理财宝白金卡',
  622700 => '中国建设银行.龙卡储蓄卡',
  622725 => '中国建设银行.龙卡准贷记卡',
  622728 => '中国建设银行.龙卡准贷记卡金卡',
  622750 => '中国银行澳门分行.人民币信用卡',
  622751 => '中国银行澳门分行.人民币信用卡',
  622752 => '中国银行.长城人民币信用卡-个人普卡',
  622753 => '中国银行.长城人民币信用卡-个人金卡',
  622754 => '中国银行.长城人民币信用卡-专用卡普卡',
  622755 => '中国银行.长城人民币信用卡-员工金卡',
  622756 => '中国银行.长城人民币信用卡-员工金卡',
  622757 => '中国银行.长城人民币信用卡-员工金卡',
  622758 => '中国银行.长城人民币信用卡-单位普卡',
  622759 => '中国银行.长城人民币信用卡-单位金卡',
  622760 => '中国银行.银联单币贷记卡',
  622761 => '中国银行.长城信用卡',
  622762 => '中国银行.长城信用卡',
  622763 => '中国银行.长城信用卡',
  622770 => '中国银行澳门分行.中银卡',
  622777 => '曲靖市商业银行.珠江源卡',
  622821 => '农业银行.金穗校园卡',
  622822 => '农业银行.金穗星座卡',
  622823 => '农业银行.金穗社保卡',
  622824 => '农业银行.金穗旅游卡',
  622825 => '农业银行.金穗青年卡',
  622826 => '农业银行.复合介质金穗通宝卡',
  622827 => '农业银行.金穗海通卡',
  622836 => '农业银行.金穗贷记卡',
  622837 => '农业银行.金穗贷记卡',
  622840 => '农业银行.金穗通宝卡',
  622841 => '农业银行.金穗惠农卡',
  622842 => '农业银行.金穗通宝卡（暂未使用）',
  622843 => '农业银行.金穗通宝贵宾卡(银)',
  622844 => '农业银行.金穗通宝卡',
  622845 => '农业银行.金穗通宝卡',
  622846 => '中国农业银行.金穗通宝卡',
  622847 => '农业银行.金穗通宝卡',
  622848 => '农业银行.金穗通宝卡',
  622849 => '农业银行.金穗通宝贵宾卡（钻石）',
  622855 => '江苏东吴农村商业银行.新苏卡',
  622856 => '桂林市商业银行.漓江卡',
  622857 => '日照市商业银行.黄海卡',
  622858 => '浙江省农村信用社联社.丰收卡',
  622859 => '珠海农村信用合作联社.信通卡',
  622860 => '大庆市商业银行.玉兔卡',
  622861 => '澳门永亨银行股份有限公司.人民币卡',
  622864 => '莱芜市商业银行.金凤卡',
  622865 => '长春市商业银行.君子兰一卡通',
  622866 => '徐州市商业银行.彭城借记卡',
  622867 => '重庆市农村信用社联合社.信合平安卡',
  622869 => '太仓农村商业银行.郑和卡',
  622870 => '靖江市长江城市信用社.长江卡',
  622871 => '永亨银行.永亨尊贵理财卡',
  622877 => '徽商银行.黄山卡',
  622878 => '杭州市商业银行.西湖卡',
  622879 => '徽商银行.黄山卡',
  622880 => '柳州市商业银行.龙城卡',
  622881 => '柳州市商业银行.龙城卡',
  622882 => '尧都区农村信用合作社联社.天河卡',
  622884 => '渤海银行.渤海银行借记卡',
  622885 => '重庆市农村信用社联合社.信合希望卡',
  622886 => '烟台市商业银行.金通卡',
  622891 => '武进农村商业银行.阳湖卡',
  622892 => '上海银行.申卡借记卡',
  622893 => '贵州省农村信用社联合社.信合卡',
  622895 => '江苏锡州农村商业银行.金阿福',
  622897 => '中外合资.南充市商业银行.熊猫团团卡',
  622898 => '长沙市商业银行.芙蓉贷记卡',
  622900 => '长沙市商业银行.芙蓉贷记卡',
  622901 => '兴业银行.银联信用卡',
  622908 => '兴业银行.兴业自然人生理财卡',
  622909 => '兴业银行.万能卡',
  622940 => '石嘴山城市信用社.麒麟卡',
  622982 => '张家口市商业银行.好运卡',
  628218 => '交通银行.太平洋卡',
  628288 => '中国工商银行.公务卡',
  628366 => '中国建设银行.公务卡',
  628368 => '大庆市商业银行.公务卡',
  650600 => '.发现卡',
  650700 => '.发现卡',
  650800 => '.发现卡',
  650900 => '.发现卡',
  682900 => '上海银行.上海明珠卡',
  683970 => '泉州市商业银行.海峡储蓄卡',
  685800 => '广东发展银行.广发信用卡',
  690755 => '招商银行.招商银行银行一卡通',
  694301 => '长沙市商业银行.芙蓉卡',
  695800 => '南通商业银行.金桥卡',
  843010 => '浦东发展银行.东方卡',
  843360 => '浦东发展银行.东方卡',
  843420 => '浦东发展银行.东方卡',
  843610 => '浦东发展银行.东方卡',
  843730 => '浦东发展银行.东方卡',
  843800 => '浦东发展银行.东方卡',
  843850 => '浦东发展银行.东方卡',
  843900 => '浦东发展银行.东方卡',
  870000 => '浦东发展银行.东方卡',
  870100 => '浦东发展银行.东方卡',
  870300 => '浦东发展银行.东方卡',
  870400 => '浦东发展银行.东方卡',
  870500 => '浦东发展银行.东方卡',
  888000 => '贵阳市商业银行.甲秀卡',
  940056 => '郑州市商业银行.世纪一卡通',
  955880 => '工商银行.牡丹银联灵通卡-个人普卡',
  955881 => '工商银行.牡丹银联灵通卡-个人普卡',
  955882 => '工商银行.牡丹银联灵通卡-个人金卡',
  955888 => '工商银行.牡丹银联理财金卡',
  984301 => '上海浦东发展银行.东方卡',
  998800 => '深圳发展银行.发展卡',
  621797 => '中国邮政储蓄银行 IC联名卡',
);
    /**
     * 获取银行名字
     * @param array $charBin
     * @param int $offset
     * @return mixed|string
     */
    public static function getNameOfBank(string $cardNo, int $offset = 0) {

        $longBin = substr($cardNo, $offset, 6);
        if (!isset(self::$Bank[$longBin])) {
         return api_return(0, '未找到该银行卡银行');
        }
        return self::$Bank[$longBin];
 
    }
    //绑定银行卡
    public function bindbankcard(){
        $id = $this->MemberId();
        $post = $this->request->get();
        $rule = [
            'bankcard|银行卡' => 'require|number',
            'name|姓名'=>'require|chs|length:2,10'
        ];
        $validate = $this->validate($post, $rule);
        //验证失败
        if ($validate !== true) {
           return api_return(0, $validate);
        }
        
        $this->bankcardyz($post['bankcard']);
        $arr = $this->getNameOfBank($post['bankcard']);
        $array = [
            'u_id'=>$id,
            'time'=>time(),
            'name'=>$post['name'],
            'bankname'=>$arr,
            'bankcard'=>$post['bankcard']
        ];
        $s = FinaceBankcard::where('bankcard',$post['bankcard'])->find();
        if ($s) {
           return api_return(0, '银行卡已被绑定');
        }
        $a = FinaceBankcard::insert($array);
        if ($a) {
            return api_return(1, '绑定成功');
        }else{
            return api_return(0, '绑定失败');
        }
    }
    //验证银行卡
    public function bankcardyz($bankcard){
        
        $strlen = strlen($bankcard);
        if($strlen < 15 || $strlen > 19){
            
            return api_return(0, '银行卡号有误');
        }

        if (!preg_match("/^\d{15}$/i",$bankcard) && !preg_match("/^\d{16}$/i",$bankcard) &&
         !preg_match("/^\d{17}$/i",$bankcard) && !preg_match("/^\d{18}$/i",$bankcard) && 
         !preg_match("/^\d{19}$/i",$bankcard)) {
            
            return api_return(0, '银行卡号有误');
        }

        $arr_no = str_split($bankcard);
        $last_n = $arr_no[count($arr_no)-1];
        krsort($arr_no);
        $i = 1;
        $total = 0;
        foreach ($arr_no as $n){
            if($i%2==0){
                $ix = $n*2;
                if($ix>=10){
                    $nx = 1 + ($ix % 10);
                    $total += $nx;
                }else{
                    $total += $ix;
                }
            }else{
                $total += $n;
            }
            $i++;
        }
        $total -= $last_n;
        // print_r($total);die;
        $x = 10 - ($total % 10);
        if($x != $last_n){
            return api_return(0, '银行卡号有误');
        }
        return;
    }
    //删除银行卡
    public function bankcarddel(){
        $id = $this->MemberId();
        $post = $this->request->get();
        $rule = [
            'id|ID' => 'require|number',
        ];
        $validate = $this->validate($post, $rule);
        //验证失败
        if ($validate !== true) {
           return api_return(0, $validate);
        }
        $a = FinaceBankcard::where('id',$post['id'])->where('u_id',$id)->delete();
        if ($a) {
            return api_return(1, '删除成功');
        }else{
            return api_return(0, '删除失败');
        }

    }
    //银行卡列表
    public function bankcardlist(){
        $id = $this->MemberId();
        $data = FinaceBankcard::where('u_id', $id)->order('time', 'desc')->select();
        if (count($data) == 0) {
            return api_return(1, '查询成功', []);
        }
        $data = $data->toArray();
        return api_return(1, '查询成功', $data);
    }
    //充值记录
    public function uprecord()
    {
        $id = $this->MemberId();
        $post = $this->request->post();
        $data = FinaceUprecord::where('uid', $id)->paginatefront($post)->order('create_time', 'desc')->select();
        if (count($data) == 0) {
            return api_return(1, '查询成功', []);
        }
        $data = $data->toArray();
        return api_return(1, '查询成功', $data);
    }

    //收入明细
    public function income()
    {
        $id = $this->MemberId();
        $post = $this->request->post();
        $data = FinaceIncome::where('uid', $id)->paginatefront($post)->order('create_time', 'desc')->select();
        if (count($data) == 0) {
            return api_return(1, '查询成功', []);
        }
        $data = $data->toArray();
        return api_return(1, '查询成功', $data);
    }

    //提现记录
    public function withdrawalrecord()
    {
        $id = $this->MemberId();
        $post = $this->request->post();
        $data = FinaceWithdrawalrecord::where('uid', $id)->paginatefront($post)->order('create_time', 'desc')->select();
        if (count($data) == 0) {
            return api_return(1, '查询成功', []);
        }
        $data = $data->toArray();
        return api_return(1, '查询成功', $data);
    }

    //余额充值
    public function topup()
    {
        // type 0微信 1支付宝 2线下
        $post = $this->request->get();
        if (count($post) == 0) {
            $post = $this->request->post();
        }
        $return_view = true;
        if ($this->request->isAjax()) {
            $return_view = false;
        }
        $id = $this->MemberId();
        $rule = [
            'money|金额' => 'require|float',
            'type|支付类型' => 'require|in:0,1,2'
        ];
        $validate = $this->validate($post, $rule);
        //验证失败
        if ($validate !== true) {
//            return api_return(0, $validate);
            if (!$return_view) {
                return api_return(0, $validate);
            } else {
                $this->apiview(0, $validate);
            }
        }
        $set = FinaceBalanceset::select()->toArray();
        if (empty($set)) {
//            return api_return(0, '账户充值已关闭');
            if (!$return_view) {
                return api_return(0, '账户充值已关闭');
            } else {
                $this->apiview(0, '账户充值已关闭');
            }
        }
        if ($set[0]['recharge'] !== 1) {
//            return api_return(0, '账户充值已关闭');
            if (!$return_view) {
                return api_return(0, '账户充值已关闭');
            } else {
                $this->apiview(0, '账户充值已关闭');
            }
        }
        $money = explode('.', $post['money']);
        if (isset($money['1'])) {
            $money = strlen(explode('.', $post['money'])[1]);
            if ($money > 3) {
//                return api_return(0, '金额小数点最多三位数');
                if (!$return_view) {
                    return api_return(0, '金额小数点最多三位数');
                } else {
                    $this->apiview(0, '金额小数点最多三位数');
                }
            };
        }
        if (strpos($post['money'], '-') !== false) {
//            return api_return(0, '金额必须为正数');
            if (!$return_view) {
                return api_return(0, '金额必须为正数');
            } else {
                $this->apiview(0, '金额必须为正数');
            }
        }
        if (substr($post['money'], 0, 1) == 0) {
//            return api_return(0, '金额输入有误');
            if (!$return_view) {
                return api_return(0, '金额输入有误');
            } else {
                $this->apiview(0, '金额输入有误');
            }
        }
        if ($post['type'] == 2) {
            $rule = [
                'thumb|成功图片' => 'require|url',
                'pay_id|线下支付方式' => 'require|number',
            ];
            $validate = $this->validate($post, $rule);
            //验证失败
            if ($validate !== true) {
//                return api_return(0, $validate);
                if (!$return_view) {
                    return api_return(0, $validate);
                } else {
                    $this->apiview(0, $validate);
                }
            }
            $c = FinaceOfflinepayment::where(['thumb' => $post['thumb']])->find();
            if (!empty($c)) {
//                return api_return(0, '提交成功,等待审核');
                if (!$return_view) {
                    return api_return(1, '提交成功,等待审核');
                } else {
                    $this->apiview(1, '提交成功,等待审核');
                }
            }
            $time = time();
            $a = FinaceOfflinepayment::insert(['uid' => $id, 'money' => $post['money'], 'state' => 0, 'pay_id' => $post['pay_id'], 'a_state' => 0, 'thumb' => $post['thumb'], 'create_time' => $time]);
            if ($a) {
//                return api_return(1, '提交成功,等待审核');
                if (!$return_view) {
                    return api_return(1, '提交成功,等待审核');
                } else {
                    $this->apiview(1, '提交成功,等待审核');
                }
            } else {
//                return api_return(0, '失败');
                if (!$return_view) {
                    return api_return(0, '失败');
                } else {
                    $this->apiview(0, '失败');
                }
            }
        } //充值返回
        elseif ($post['type'] == 0) {
            $wechat_pay = new WechatPays();
            $pay = WechatPay::where('is_union', 1)->find();
            if (empty($pay)) {
//                return api_return(0, '微信支付通道已关闭');
                if (!$return_view) {
                    return api_return(0, '微信支付通道已关闭');
                } else {
                    $this->apiview(0, '微信支付通道已关闭');
                }
            }
            $data = ['total_fee' => $post['money'], 'uid' => $id];

            $result = $wechat_pay->jsapi_index($data, false, $this->request->domain() . '/api/wechat_front/wechat_balance/', true);
            $pay_log = $result['pay_log'];
            $result = $result['result'];
//            $user = Member::find($id);
            $this->assign('uid', $id);
            $this->assign('pay_log', $pay_log);
            $this->assign('amount', $post['money']);
            $this->assign('jsApiParameters', $result);
            $this->assign('redirect_url', $this->request->domain() . '/#/paySuccess');

            return $this->fetch('/pay/wechat/jsapi_balance');

            $up = true;
            if ($up !== true) {
//                return api_return(0, '充值失败');
                if (!$return_view) {
                    return api_return(0, '充值失败');
                } else {
                    $this->apiview(0, '充值失败');
                }
            }
            $s = json_decode($set[0]['sole'], true);
            $moneys = 0;
            $money = array();
            foreach ($s as $k => $v) {
                if ($post['money'] >= $v['enough']) {
                    $money[$k]['money'] = $v['give'];
                }
            }
            if (!empty($money)) {
                $money = max($money);
                if ($set[0]['proportion_status'] == 0) {
                    $moneys = $money['money'];
                } else {
                    $moneys = $post['money'] * $money['money'] / 100;
                }
            }
            $momber = Member::find($id);
            $post['money'] = $moneys + $post['money'];
            $balance = $momber['credit2'] + $post['money'];
            $create_time = time();
            try {
                $save = FinaceBalancesub::insert(['uid' => $id, 'balance' => $balance, 'state' => 2, 'money' => $post['money'], 'create_time' => $create_time, 'credit_type' => '1']);
                $save = Member::update(['id' => $id, 'credit2' => $balance]);
                $save = FinaceUprecord::insert(['uid' => $id, 'way' => 1, 'money' => $post['money'], 'state' => 1, 'create_time' => $create_time, 'credit_type' => '1']);
            } catch (\Exception $e) {
//                return api_return(0, '提交失败:' . $e->getMessage());
                if (!$return_view) {
                    return api_return(0, '提交失败');
                } else {
                    $this->apiview(0, '提交失败');
                }
            }
        } elseif ($post['type'] == 1) {
            $ali_pay = new AliPays();
            $pay = AliPay::where('is_union', 1)->find();
            if (empty($pay)) {
//                return api_return(0, '支付宝支付通道已关闭');
                if (!$return_view) {
                    return api_return(0, '支付宝支付通道已关闭');
                } else {
                    $this->apiview(0, '支付宝支付通道已关闭');
                }
            }
            $data = ['total_fee' => $post['money'], 'uid' => $id];
            $return_url = $this->request->domain() . '/api/ali_front/ali_balance_return/';
            $result = $ali_pay->jsapi_index($data, false, $this->request->domain() . '/api/ali_front/ali_balance/', $return_url);
            $pay_log = $result['pay_log'];
            $result = $result['result'];
//            $user = Member::find($id);
            $this->assign('uid', $id);
            $this->assign('pay_log', $pay_log);
            $this->assign('amount', $post['money']);
            $this->assign('jsApiParameters', $result);
            $this->assign('redirect_url', $this->request->domain() . '/#/paySuccess');

            return $this->fetch('/pay/wechat/jsapi_balance');

            $up = true;
            if ($up !== true) {
//                return api_return(0, '充值失败');
                if (!$return_view) {
                    return api_return(0, '充值失败');
                } else {
                    $this->apiview(0, '充值失败');
                }
            }
            $s = json_decode($set[0]['sole'], true);
            $moneys = 0;
            $money = array();
            foreach ($s as $k => $v) {
                if ($post['money'] >= $v['enough']) {
                    $money[$k]['money'] = $v['give'];
                }
            }
            if (!empty($money)) {
                $money = max($money);
                if ($set[0]['proportion_status'] == 0) {
                    $moneys = $money['money'];
                } else {
                    $moneys = $post['money'] * $money['money'] / 100;
                }
            }
            $momber = Member::find($id);
            $post['money'] = $moneys + $post['money'];
            $balance = $momber['credit2'] + $post['money'];
            $create_time = time();
            try {
                $save = FinaceBalancesub::insert(['uid' => $id, 'balance' => $balance, 'state' => 2, 'money' => $post['money'], 'create_time' => $create_time, 'credit_type' => '1']);
                $save = Member::update(['id' => $id, 'credit2' => $balance]);
                $save = FinaceUprecord::insert(['uid' => $id, 'way' => 1, 'money' => $post['money'], 'state' => 1, 'create_time' => $create_time, 'credit_type' => '1']);
            } catch (\Exception $e) {
//                return api_return(0, '提交失败:' . $e->getMessage());
                if (!$return_view) {
                    return api_return(0, '提交失败');
                } else {
                    $this->apiview(0, '提交失败');
                }

            }
        } else {

        }
        if ($save) {
//            return api_return(1, '提交成功');
            if (!$return_view) {
                return api_return(1, '提交成功');
            } else {
                $this->apiview(1, '提交成功');
            }

        } else {
//            return api_return(0, '提交失败');
            if (!$return_view) {
                return api_return(0, '提交失败');
            } else {
                $this->apiview(0, '提交失败');
            }

        }
    }


    public function withdrawal()
    {
        $id = $this->MemberId();
        $post = $this->request->post();
        $rule = [
            'money|金额' => 'require|float',
            'pay_id|线下支付方式' => 'require|number',
        ];
        $validate = $this->validate($post, $rule);
        //验证失败
        if ($validate !== true) {
            return api_return(0, $validate);
        }

        $set = FinaceWithdrawset::select()->toArray();
        if (empty($set)) {
            return api_return(0, '账户提现已关闭');
        }
        if ($set[0]['recharge'] !== 1) {
            return api_return(0, '账户提现已关闭');
        }
        $money = explode('.', $post['money']);
        if (isset($money['1'])) {
            $money = strlen(explode('.', $post['money'])[1]);
            if ($money > 3) {
                return api_return(0, '金额小数点最多三位数');
            };
        }
        if (strpos($post['money'], '-') !== false) {
            return api_return(0, '金额必须为正整数');
        }
        if (substr($post['money'], 0, 1) == 0) {
            return api_return(0, '金额输入有误');
        }
        if ($post['pay_id'] == 0) {
            $rule = [
                'thumb|收款码' => 'require|url',
            ];
            $validate = $this->validate($post, $rule);
            //验证失败
            if ($validate !== true) {
                return api_return(0, $validate);
            }
        } elseif($post['pay_id'] == 1) {
            $rule = [
                'alipaystates|支付宝类型' => 'require|number',
            ];
            $validate = $this->validate($post, $rule);
            //验证失败
            if ($validate !== true) {
                return api_return(0, $validate);
            }
            if ($post['alipaystates'] == 0) {
                $rule = [
                    'thumb|收款码' => 'require|url',
                ];
                $validate = $this->validate($post, $rule);
                //验证失败
                if ($validate !== true) {
                    return api_return(0, $validate);
                }
            } else {
                $rule = [
                    'alipaynumber|支付宝账号' => 'require|email',
                    'alipayname|支付宝姓名' => 'require|max:10',
                ];
                $validate = $this->validate($post, $rule);
                //验证失败
                if ($validate !== true) {
                    $rule = [
                        'alipayname|支付宝姓名' => 'require|max:5',
                        'alipaynumber|支付宝账号' => 'require|mobile',
                    ];
                    $validate = $this->validate($post, $rule);
                    //验证失败
                    if ($validate !== true) {
                        return api_return(0, $validate);
                    }
                }

            }
        }else{
             $rule = [
                'bankcardid|银行卡' => 'require|number',
            ];
            $validate = $this->validate($post, $rule);
            //验证失败
            if ($validate !== true) {
                return api_return(0, $validate);
            }
            $bankcard = FinaceBankcard::where('id',$post['bankcardid'])->where('u_id',$id)->find();
            if (!$bankcard) {
                return api_return(0, '银行卡未绑定该用户');
            }
        }
        if ($set['0']['service'] == 1) {
            $post['services'] = $set['0']['services'];
        } else {
            $post['services'] = $set['0']['services'] * $post['money'] / 100;
        }
        $momber = Member::find($id);
        if ($momber['credit2'] < $post['money']) {
            return api_return(0, '提现失败,余额不足');
        }
        $time = time();
        $mn = $momber['credit2'] - $post['money'];
        $mu = -$post['money'];
        $this->PluginApiCD('withdrawal' . $id);
        Member::where('id', $id)->dec('credit2', $post['money'])->update();
        // Member::where(['id'=>$id])->update(['credit2'=>$mn]);
        $number = time() . rand(99999, 1000000);
        $remark = '提现前余额:' . $momber['credit2'] . '->提现后余额:' . $mn;


        $cord_id = FinaceWithdrawalrecord::insertGetId(['remark' => $remark, 'before_balance' => $momber['credit2'], 'after_balance' => $mn, 'uid' => $id, 'number' => $number, 'money' => $post['money'], 'numstatus' => 3, 'status' => 0, 'create_time' => $time]);
        FinaceBalancesub::insert(['credit_type' => '1', 'uid' => $id, 'balance' => $mn, 'state' => 3, 'money' => $mu, 'create_time' => $time, 'before_balance' => $momber['credit2'], 'remark' => $remark]);
        if ($post['pay_id'] == 0) {
            $a = FinaceOfflinewithdrawals::insert(['uid' => $id, 'money' => $post['money'], 'procedure' => $post['services'], 'state' => 0, 'pay_id' => $post['pay_id'], 'thumb' => $post['thumb'], 'create_time' => $time, 'cord_id' => $cord_id, 'alipaystates' => 0]);
        } elseif($post['pay_id'] == 1) {
            if ($post['alipaystates'] == 0) {
                $a = FinaceOfflinewithdrawals::insert(['uid' => $id, 'money' => $post['money'], 'procedure' => $post['services'], 'state' => 0, 'pay_id' => $post['pay_id'], 'thumb' => $post['thumb'], 'create_time' => $time, 'cord_id' => $cord_id, 'alipaystates' => 0]);
            } else {
                $a = FinaceOfflinewithdrawals::insert(['uid' => $id, 'money' => $post['money'], 'procedure' => $post['services'], 'state' => 0, 'pay_id' => $post['pay_id'], 'alipaynumber' => $post['alipaynumber'], 'alipayname' => $post['alipayname'], 'alipaystates' => 1, 'thumb' => 0, 'create_time' => $time, 'cord_id' => $cord_id]);
            }
        }else{
            $bankcards = $bankcard['bankcard'];
            $bankname = $bankcard['bankname'];
            $name = $bankcard['name'];
            $a = FinaceOfflinewithdrawals::insert(['uid' => $id, 'money' => $post['money'], 'procedure' => $post['services'], 'state' => 0, 'pay_id' => $post['pay_id'], 'alipaynumber' => $bankcards,'alipayname'=>$bankname, 'thumb' => $name, 'create_time' => $time, 'cord_id' => $cord_id,'alipaystates' => 2]);
        }

        if ($a) {
            return api_return(1, '提交成功,等待审核');
        } else {
            return api_return(0, '提现失败');
        }
    }

    //查询提现设置
    public function withdrawalset()
    {
        $set = FinaceWithdrawset::select()->toArray();
        if (empty($set)) {
            return api_return(0, '账户提现已关闭');
        }
        if ($set[0]['recharge'] !== 1) {
            return api_return(0, '账户提现已关闭');
        }
        $data = array();
        if ($set[0]['manual_wechat'] == 1) {
            $data['manual'][] = ['id' => 0, 'name' => '微信'];
        }
        if ($set[0]['manual_alipay'] == 1) {
            $data['manual'][] = ['id' => 1, 'name' => '支付宝'];
        }
        if ($set[0]['manual_bankcard'] == 1) {
            $data['manual'][] = ['id' => 2, 'name' => '银行卡'];
        }
        $data['service'] = $set[0]['service'];
        $data['services'] = $set[0]['services'];
        return api_return(1, '查询成功', $data);
    }

    //充值余额设置
    public function topupset()
    {
        $set = FinaceBalanceset::select()->toArray();
        if (empty($set)) {
            return api_return(0, '账户充值已关闭');
        }
        if ($set[0]['recharge'] !== 1) {
            return api_return(0, '账户充值已关闭');
        }
        $data = array();
        if ($set[0]['manual_wechat'] == 1) {
            $data['manual'][] = ['id' => 1, 'name' => '微信'];
        }
        if ($set[0]['manual_alipay'] == 1) {
            $data['manual'][] = ['id' => 2, 'name' => '支付宝'];
        }
        if ($set[0]['manual_offline'] == 1) {
            $data['manual'][] = ['id' => 3, 'name' => '线下'];
        }
        return api_return(1, '查询成功', $data);
    }
}